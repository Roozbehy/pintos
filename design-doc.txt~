             +-------------------------+
             |         OS 211          |
             |  TASK 2: USER PROGRAMS  |
             |     DESIGN DOCUMENT     |
             +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Duc Ngo <dn1111@imperial.ac.uk>
Roozbeh Zareian <rz1511@imperial.ac.uk>
Ningyuan Lu <nl1010@imperial.ac.uk>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

               ARGUMENT PASSING
               ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

We defined
//Max length of the command lines, including the filename and the args
#define COMMAND_LINE_LIMIT 128

//Max number of arguments allowed to be passed
//For now we just put it as 64. May be changed if needed
#define MAX_ARG 64


---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

** Summary

The main purpose of process_execute() is to receives the args and run the process.
First we check if the total length of the filename and the args exceeded the COMMAND_LINE_LIMIT,
then we extract the name of the function out, separate it from the args then pass it to start_process

In start_process(), we use strtok_r to tokenise the args and the file name and put them into
an array of char, called argv. So the actual file name will be stored in argv[0], and the arguments followed.

The number of args will be stored in argc.

If load is successful, we start going down the stack, first putting the addresses of the args, followed by
the pointer to the address of argv array, then the argc, a return address (0). 
Basically we followed the spec.

** To arrange the elems in the right order

We put the file name then the args in that order when going up the stack.
Then for putting the addresses, we go backwards from the last to the first argument.

** Avoiding overflowing

The stack page is quite huge, while we limit the length of our file name into 128 bytes.
Anything bigger than that will result in an error.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

strtok_r() returns a pointer and strtok() doesn't.
In strtok_r(), that pointer is provided by the caller. That pointer can then 
be saved and used later. Handy.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

In Unix approach, the system will not have to spend as much time in the kernel,
reducing probability of kernel being harmed.

Also, if bad things happen when pasing commands, it will happen in the shell.
The kernel is safe.

Unix also provide user flexibility when passing arguments. For example, using ';' to pass 
more than 1 line of commands

                 SYSTEM CALLS
                 ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

In thread.h:
  //return status
  int ret;

  //true iff it has been waited before
  bool already_waited; 

  //determines if the execution success or not
  bool success; 

  //semaphore for process_wait()
  struct semaphore wait; 

  //semaphore for process_execute()
  struct semaphore load_wait; 

  //list of its child processes
  struct list child_list; 

  //list_elem for child_list
  struct list_elem child_elem;

  //list of files that is opened by the process
  struct list opened_files; 

  //parent process of this process
  struct thread *parent; 

  //executable file on the disk
  struct file *image_on_disk; 

  //Helper functions for task 2.
  //Get thread from its tid
  struct thread *
  get_thread(tid_t tid);

  //get thread from the provided list and a tid.
  //used to get a child thread from a child_list
  struct thread *
  get_child_thread(struct list *l, tid_t tid);

In syscall.c:
  We added all the syscalls that is in the spec: sys_exit, sys_write etc. Total of 13

  //handler for syscall
  static handler syscall_vec[SYSCALL_NUM];
  //locks
  static struct lock lock;
  static struct lock fid_lock;
  //file list 
  static struct list files;

  //find a file by its fd from the file_list of a process
  static struct file *
  find_file(int fd)

  //Returns a fid to use for a new file
  //starting from 2 (0 and 1 taken by IO)
  static int
  allocate_fid(void)

  //Check validity of a pointer, address etc
  static bool
  valid_pointer(const void *vaddr)

In syscall.h:
  //This struct represent an elem for a file, which will be used in creating a file list
  //for a process
  //Contains the file ptr, a file descriptor, its list_elem and its thread elem
  struct fd_elem
  {
    int fd;
    struct file *file;
    struct list_elem elem;
    struct list_elem thread_elem;
  };

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

When a file is opened, its pointer and id will be saved to a struct fd_elem.
After a process is finished, its files will be closed hence the fd will be freed.
When another process opened another file, the same file id may be granted to that file.
So file descriptor is not unique within the entire OS, just within a single process.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

First of all, both write and read will be wrapped inside a lock.
Then we check the address, see if it's valid, by using valid_pointer.
If no problem found, we proceeded to check what pointer that represent,
a STDOUT or a STDIN or an address to another file, and go on accordingly.

STDOUT will write to the file, STDIN will read it. If the fd represent another file,
find it and continue accodingly to what we're doing, read or write.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

//TODO

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.



>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.



---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?



>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?



---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

We check it by verifying the validity of a user provided pointer.
This is pretty straight foward and doesn't consume much time or space,
so we thought we could just do it.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

** Advantage: 
It makes searching for the fd easy. 
We can access the file and the thread that holds that fd easily.

** Disadvantage:
Creating to many of such struct may be space consuming.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

We didn't touch the mapping.

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining tasks?

>> Any other comments?
